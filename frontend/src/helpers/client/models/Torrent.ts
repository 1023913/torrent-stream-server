/* tslint:disable */
/* eslint-disable */
/**
 * Torrents Stream Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
    TorrentFile,
    TorrentFileFromJSON,
    TorrentFileFromJSONTyped,
    TorrentFileToJSON,
} from './'

/**
 *
 * @export
 * @interface Torrent
 */
export interface Torrent {
    /**
     *
     * @type {string}
     * @memberof Torrent
     */
    link: string
    /**
     *
     * @type {string}
     * @memberof Torrent
     */
    infoHash: string
    /**
     *
     * @type {string}
     * @memberof Torrent
     */
    name: string
    /**
     *
     * @type {number}
     * @memberof Torrent
     */
    started: number
    /**
     *
     * @type {number}
     * @memberof Torrent
     */
    updated: number
    /**
     *
     * @type {Array<TorrentFile>}
     * @memberof Torrent
     */
    files: Array<TorrentFile>
    /**
     *
     * @type {number}
     * @memberof Torrent
     */
    downloaded: number
    /**
     *
     * @type {number}
     * @memberof Torrent
     */
    downloadSpeed: number
}

export function TorrentFromJSON(json: any): Torrent {
    return TorrentFromJSONTyped(json, false)
}

export function TorrentFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): Torrent {
    if (json === undefined || json === null) {
        return json
    }
    return {
        link: json['link'],
        infoHash: json['infoHash'],
        name: json['name'],
        started: json['started'],
        updated: json['updated'],
        files: (json['files'] as Array<any>).map(TorrentFileFromJSON),
        downloaded: json['downloaded'],
        downloadSpeed: json['downloadSpeed'],
    }
}

export function TorrentToJSON(value?: Torrent | null): any {
    if (value === undefined) {
        return undefined
    }
    if (value === null) {
        return null
    }
    return {
        link: value.link,
        infoHash: value.infoHash,
        name: value.name,
        started: value.started,
        updated: value.updated,
        files: (value.files as Array<any>).map(TorrentFileToJSON),
        downloaded: value.downloaded,
        downloadSpeed: value.downloadSpeed,
    }
}
