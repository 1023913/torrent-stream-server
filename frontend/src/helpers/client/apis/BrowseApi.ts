/* tslint:disable */
/* eslint-disable */
/**
 * Torrents Stream Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
    ApiError,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    Provider,
    ProviderFromJSON,
    ProviderToJSON,
    ProviderTorrent,
    ProviderTorrentFromJSON,
    ProviderTorrentToJSON,
} from '../models'

export interface SearchTorrentsRequest {
    query: string
    provider: string
    category?: string
}

/**
 *
 */
export class BrowseApi extends runtime.BaseAPI {
    /**
     */
    async getProvidersRaw(): Promise<runtime.ApiResponse<Array<Provider>>> {
        const queryParameters: runtime.HTTPQuery = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = typeof token === 'function' ? token('apiKey', []) : token

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request({
            path: `/api/browse/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        })

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProviderFromJSON))
    }

    /**
     */
    async getProviders(): Promise<Array<Provider>> {
        const response = await this.getProvidersRaw()
        return await response.value()
    }

    /**
     */
    async searchTorrentsRaw(
        requestParameters: SearchTorrentsRequest
    ): Promise<runtime.ApiResponse<Array<ProviderTorrent>>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter requestParameters.query was null or undefined when calling searchTorrents.'
            )
        }

        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter requestParameters.provider was null or undefined when calling searchTorrents.'
            )
        }

        const queryParameters: runtime.HTTPQuery = {}

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query
        }

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider
        }

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = typeof token === 'function' ? token('apiKey', []) : token

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request({
            path: `/api/browse/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        })

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(ProviderTorrentFromJSON)
        )
    }

    /**
     */
    async searchTorrents(
        requestParameters: SearchTorrentsRequest
    ): Promise<Array<ProviderTorrent>> {
        const response = await this.searchTorrentsRaw(requestParameters)
        return await response.value()
    }
}
